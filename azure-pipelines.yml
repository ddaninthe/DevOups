# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  imageName: 'docker-container:$(build.buildId)'

steps:
- task: DotNetCoreCLI@2
  inputs:
    command: test
    projects: 'romans/TestsExam/*.csproj'
    arguments: '--configuration $(buildConfiguration) --collect "Code coverage"'
  displayName: 'Run tests'
 
- script: dotnet test romans/TestsExam --logger trx --collect "Code coverage"
  displayName: 'Get test results'
  
- task: PublishTestResults@2
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'
  displayName: 'Publish test results'
  
- script: dotnet tool install --global coverlet.console
  displayName: 'Install Coverlet'
  
- script: dotnet add romans/TestsExam package coverlet.msbuild
  displayName: 'Add Coverlet package to Test project'
  
- script: dotnet tool install dotnet-reportgenerator-globaltool --tool-path .
  displayName: 'Install reportgenerator' 
 
- script: dotnet test romans/TestsExam /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura /p:CoverletOutput=$(Build.SourcesDirectory)/Coverage/ /p:Threshold=80 /p:Exclude=[xunit.*]*
  displayName: 'Run Coverlet'

- script: ./reportgenerator "-reports:$(Build.SourcesDirectory)/Coverage/coverage.cobertura.xml" "-targetdir:$(Build.SourcesDirectory)/Coverage" "-reporttypes:HtmlInline_AzurePipelines;HTMLChart" "-filters:+AppConsole*;-Xunit*"
  displayName: 'Report Generator'

- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: cobertura
    summaryFileLocation: $(Build.SourcesDirectory)/Coverage/coverage.cobertura.xml
    reportDirectory: $(Build.SourcesDirectory)/Coverage
  displayName: 'Publish code coverage'
  
- script: docker build -f Dockerfile -t $(imageName) .
  displayName: 'Build Dockerfile'